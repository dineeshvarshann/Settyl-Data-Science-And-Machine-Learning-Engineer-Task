import pandas as pd
from sklearn.preprocessing import LabelEncoder

# Provided dataset
data = [
    {"externalStatus": "PORT OUT", "internalStatus": "Port Out"},
    {"externalStatus": "TERMINAL IN", "internalStatus": "Inbound Terminal"},
    {"externalStatus": "PORT IN", "internalStatus": "Port In"},
    {"externalStatus": "Vessel departure from first POL (Vessel name : TIAN FU HE)", "internalStatus": "Departure"},
    {"externalStatus": "Vessel arrival at final POD (Vessel name : TIAN FU HE)", "internalStatus": "Arrival"},
    {"externalStatus": "DEPARTCU", "internalStatus": "Departure"},
    {"externalStatus": "Gate in", "internalStatus": "Gate In"},
    {"externalStatus": "Load on MAERSK SEMBAWANG / 237E", "internalStatus": "Loaded on Vessel"},
    {"externalStatus": "Discharge", "internalStatus": "Departure"},
    {"externalStatus": "Gate out", "internalStatus": "Gate Out"},
    {"externalStatus": "Gate in", "internalStatus": "Gate In"},
    {"externalStatus": "Load on MSC SVEVA / 248E", "internalStatus": "Loaded on Vessel"},
    {"externalStatus": "Discharge", "internalStatus": "Departure"},
    {"externalStatus": "Gate out", "internalStatus": "Gate Out"},
    {"externalStatus": "DEPARTCU", "internalStatus": "Departure"},
    {"externalStatus": "Gate in", "internalStatus": "Gate In"},
    {"externalStatus": "Load on MAERSK SEMBAWANG / 237E", "internalStatus": "Loaded on Vessel"},
    {"externalStatus": "Discharge", "internalStatus": "Departure"},
    {"externalStatus": "Gate out", "internalStatus": "Gate Out"},
    {"externalStatus": "Gate in", "internalStatus": "Gate In"},
    {"externalStatus": "Load on MSC SVEVA / 248E", "internalStatus": "Loaded on Vessel"},
    {"externalStatus": "Discharge", "internalStatus": "Departure"},
    {"externalStatus": "Gate out", "internalStatus": "Gate Out"},
    {"externalStatus": "Gate in", "internalStatus": "Gate In"}
]

# Convert to DataFrame
df = pd.DataFrame(data)

# Preprocessing
label_encoder = LabelEncoder()
df['external_status_encoded'] = label_encoder.fit_transform(df['externalStatus'])
df['internal_status_encoded'] = label_encoder.fit_transform(df['internalStatus'])

# Display the preprocessed DataFrame
print(df)

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, GlobalAveragePooling1D, Dense

# Define the model architecture
model = Sequential([
    Embedding(input_dim=len(label_encoder.classes_), output_dim=64),
    GlobalAveragePooling1D(),
    Dense(64, activation='relu'),
    Dense(len(label_encoder.classes_), activation='softmax')
])

# Compile the model
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

# Display the model summary
print(model.summary())

# Split the dataset into features and labels
X = df['external_status_encoded'].values
y = df['internal_status_encoded'].values

# Train-test split
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the model
history = model.fit(X_train, y_train, epochs=10, validation_split=0.2, verbose=2)

# Evaluate the model
loss, accuracy = model.evaluate(X_test, y_test)
print("Test Loss:", loss)
print("Test Accuracy:", accuracy)


from fastapi import FastAPI
from pydantic import BaseModel

# Create FastAPI app
app = FastAPI()

# Define request and response models
class ExternalStatusRequest(BaseModel):
    external_status: str

class InternalStatusResponse(BaseModel):
    internal_status: str

# Define API endpoint
@app.post("/predict_internal_status/", response_model=InternalStatusResponse)
async def predict_internal_status(external_status_request: ExternalStatusRequest):
    # Preprocess input
    external_status_encoded = label_encoder.transform([external_status_request.external_status])

    # Predict internal status
    prediction = model.predict(external_status_encoded)

    # Decode prediction
    predicted_internal_status = label_encoder.inverse_transform([prediction.argmax()])[0]

    # Return response
    return {"internal_status": predicted_internal_status}


